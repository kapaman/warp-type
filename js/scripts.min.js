let SPEED,
    speed = 30,
    currentText = 0,
    text = [
        "If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.",
        "Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.",
        "If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.", "The best and most beautiful things in the world cannot be seen or even touched — they must be felt with the heart.",
        "Be mindful when it comes to your words. A string of some that don't mean much to you, may stick with someone else for a lifetime.",
        "Words have energy and power with the ability to help, to heal, to hinder, to hurt, to harm, to humiliate, and to humble.",
        "The tongue has no bones, but is strong enough to break a heart. So be careful with your words.",
        "Be careful what you say. You can say something hurtful in ten seconds, but ten years later, the wounds are still there.",
        "Kind words are a creative force, a power that concurs in the building up of all that is good, and energy that showers blessings upon the world.",
        "The best word shakers were the ones who understood the true power of words. They were the ones who could climb the highest."
    ]
currentTheme = parseInt(Math.random() * 4),
    decimalBackground = 0,
    increment = 10,
    previousSpeed = speed,
    themeChangeButton = document.querySelector("#themeChange");
document.querySelector(".switch input").addEventListener("change", (e) => {
    instantDeath = e.target.checked;
});
let characters,
    timeStart,
    instantDeath = document.querySelector(".switch input").checked,
    themes = [
        { speed: 1, speedAdjFactor: 0, density: 2, shape: "circle", warpEffect: !0, warpEffectLength: 4, depthFade: !0, starSize: 5, backgroundColor: "#1F74C9", starColor: "#FFFFFF" },
        { speed: 2, speedAdjFactor: 0, density: 1, shape: "circle", warpEffect: !0, warpEffectLength: 4, depthFade: !0, starSize: 5, backgroundColor: "hsl(263,45%,7%)", starColor: "#FFFFFF" },
        { speed: 2, speedAdjFactor: 0, density: 2, shape: "circle", warpEffect: !0, warpEffectLength: 5, depthFade: !0, starSize: 4, backgroundColor: "#202020", starColor: "#FF0000" },
        { speed: 2, speedAdjFactor: 0, density: 2, shape: "circle", warpEffect: !1, warpEffectLength: 4, depthFade: !1, starSize: 15, backgroundColor: "hsl(263,45%,7%)", starColor: "#FFFFFF" },
    ],
    typingSpeed = document.querySelector(".typingSpeed"),
    acceleration = 0.001,
    currentIndex = 0,
    intervalSet = null,
    regoButton = document.querySelector(".regoButton");
regoButton.addEventListener("click", () => {
    currentText++;
    init();
});
let inputBox = document.querySelector(".inputBox");
(inputBox.value = ""),
    inputBox.focus(),
    inputBox.addEventListener("input", (e) => {
        if ((e.preventDefault(), e.data === text[(currentText) % text.length][currentIndex]))
            0 === currentIndex && (timeStart = Date.now()),
                currentIndex++,
                null === intervalSet &&
                (intervalSet = setInterval(() => {
                    (previousSpeed = speed),
                        (speed = parseInt((((currentIndex + 1) / 5) * 6e4) / (Date.now() - timeStart))),
                        (typingSpeed.innerHTML = speed + " WPM"),
                        speed <= previousSpeed && 0 !== speed ? SPEED > 2 && (SPEED -= 0.4) : SPEED <= 20 && (SPEED += 3);
                }, 16)),
                " " === e.data && (inputBox.value = "");
        else if (instantDeath) return clearInterval(intervalSet), (inputBox.value = ""), inputBox.blur(), (inputBox.style.display = "none"), void (regoButton.style.display = "flex");
        if (currentIndex === text[(currentText)].length)
            return (
                clearInterval(intervalSet),
                typingText.childNodes[currentIndex - 1].classList.remove("currentCursor"),
                typingText.childNodes[currentIndex - 1].classList.add("typedOut"),
                (inputBox.value = ""),
                inputBox.blur(),
                (inputBox.style.display = "none"),
                void (regoButton.style.display = "flex")
            );
        typingText.childNodes[currentIndex - 1].classList.remove("currentCursor");
        typingText.childNodes[currentIndex].classList.add("currentCursor");
        typingText.childNodes[currentIndex - 1].classList.add("typedOut");
    });
const init = () => {
    textSplitChars = text[(currentText) % text.length].split(""),
        typingText = document.querySelector(".typingText"),
        (typingText.innerHTML = ""),
        (characters = textSplitChars.map((e) => {
            const t = document.createElement("span");
            return (t.innerText = e), typingText.appendChild(t), t;
        })),
        typingText.childNodes[0].classList.add("currentCursor"),
        (regoButton.style.display = "none"),
        (inputBox.style.display = "unset"),
        (typingSpeed.innerHTML = "0 WPM"),
        (inputBox.value = ""),
        inputBox.focus(),
        (SPEED = themes[currentTheme % themes.length].speed),
        (intervalSet !== null) ? clearInterval(intervalSet) : null;
    (intervalSet = null),
        (currentIndex = 0);
};
function timeStamp() {
    return window.performance.now ? window.performance.now() : Date.now();
}
function isVisible(e) {
    var t = e.getBoundingClientRect();
    return t.top + t.height >= 0 && t.left + t.width >= 0 && t.bottom - t.height <= (window.innerHeight || document.documentElement.clientHeight) && t.right - t.width <= (window.innerWidth || document.documentElement.clientWidth);
}
function Star(e, t, i) {
    (this.x = e), (this.y = t), (this.z = i), (this.size = 0.5 + Math.random());
}
function WarpSpeed(e, t) {
    if (((this.targetId = e), null == WarpSpeed.RUNNING_INSTANCES && (WarpSpeed.RUNNING_INSTANCES = {}), WarpSpeed.RUNNING_INSTANCES[e] && WarpSpeed.RUNNING_INSTANCES[e].destroy(), (SPEED = (t = t || {}).speed), "string" == typeof t))
        try {
            t = JSON.parse(t);
        } catch (e) {
            t = {};
        }
    (this.SPEED = null == t.speed || t.speed < 0 ? 0.7 : t.speed),
        (this.TARGET_SPEED = null == t.targetSpeed || t.targetSpeed < 0 ? this.SPEED : t.targetSpeed),
        (this.SPEED_ADJ_FACTOR = null == t.speedAdjFactor ? 0.03 : t.speedAdjFactor < 0 ? 0 : t.speedAdjFactor > 1 ? 1 : t.speedAdjFactor),
        (this.DENSITY = null == t.density || t.density <= 0 ? 0.7 : t.density),
        (this.USE_CIRCLES = null == t.shape || "circle" == t.shape),
        (this.DEPTH_ALPHA = null == t.depthFade || t.depthFade),
        (this.WARP_EFFECT = null == t.warpEffect || t.warpEffect),
        (this.WARP_EFFECT_LENGTH = null == t.warpEffectLength ? 5 : t.warpEffectLength < 0 ? 0 : t.warpEffectLength),
        (this.STAR_SCALE = null == t.starSize || t.starSize <= 0 ? 3 : t.starSize),
        (this.BACKGROUND_COLOR = null == t.backgroundColor ? "hsl(263,45%,7%)" : t.backgroundColor);
    var i = document.getElementById(this.targetId);
    (i.width = 1), (i.height = 1), (this.STAR_COLOR = null == t.starColor ? "#FFFFFF" : t.starColor), (this.prevW = -1), (this.prevH = -1), (this.stars = []);
    for (var n = 0; n < 1e3 * this.DENSITY; n++) this.stars.push(new Star(1e3 * (Math.random() - 0.5), 1e3 * (Math.random() - 0.5), 1e3 * Math.random()));
    (this.lastMoveTS = timeStamp()), (this.drawRequest = null), (this.LAST_RENDER_T = 0), (WarpSpeed.RUNNING_INSTANCES[e] = this), this.draw();
}
init(),
    (window.requestAnimationFrame =
        window.requestAnimationFrame ||
        function (e, t) {
            setTimeout(e, 1e3 / 60);
        }),
    (WarpSpeed.prototype = {
        constructor: WarpSpeed,
        draw: function () {
            var e = timeStamp();
            if (document.getElementById(this.targetId)) {
                this.move();
                var t = document.getElementById(this.targetId);
                if (!this.PAUSED && isVisible(t)) {
                    (this.prevW == t.clientWidth && this.prevH == t.clientHeight) ||
                        ((t.width = (t.clientWidth < 10 ? 10 : t.clientWidth) * (window.devicePixelRatio || 1)), (t.height = (t.clientHeight < 10 ? 10 : t.clientHeight) * (window.devicePixelRatio || 1))),
                        (this.size = (t.height < t.width ? t.height : t.width) / (10 / (this.STAR_SCALE <= 0 ? 0 : this.STAR_SCALE))),
                        this.WARP_EFFECT && (this.maxLineWidth = this.size / 30);
                    var i = t.getContext("2d");
                    (i.globalAlpha = 1), (i.fillStyle = this.BACKGROUND_COLOR), i.fillRect(0, 0, t.width, t.height), (i.fillStyle = this.STAR_COLOR);
                    for (var n = 0; n < this.stars.length; n++) {
                        var r = this.stars[n],
                            s = r.x / r.z,
                            a = r.y / r.z;
                        if (this.WARP_EFFECT || !(s < -0.5 || s > 0.5 || a < -0.5 || a > 0.5)) {
                            var d = (r.size * this.size) / r.z;
                            if (!(d < 0.3)) {
                                if (this.DEPTH_ALPHA) {
                                    var h = (1e3 - r.z) / 1e3;
                                    i.globalAlpha = h < 0 ? 0 : h > 1 ? 1 : h;
                                }
                                if (this.WARP_EFFECT) {
                                    i.beginPath();
                                    var o = r.x / (r.z + this.WARP_EFFECT_LENGTH * SPEED),
                                        l = r.y / (r.z + this.WARP_EFFECT_LENGTH * SPEED);
                                    if (o < -0.5 || o > 0.5 || l < -0.5 || l > 0.5) continue;
                                    i.moveTo(t.width * (s + 0.5) - d / 2, t.height * (a + 0.5) - d / 2),
                                        i.lineTo(t.width * (o + 0.5) - d / 2, t.height * (l + 0.5) - d / 2),
                                        (i.lineWidth = d > this.maxLineWidth ? this.maxLineWidth : d),
                                        this.USE_CIRCLES ? (i.lineCap = "round") : (i.lineCap = "butt"),
                                        (i.strokeStyle = i.fillStyle),
                                        i.stroke();
                                } else
                                    this.USE_CIRCLES
                                        ? (i.beginPath(), i.arc(t.width * (s + 0.5) - d / 2, t.height * (a + 0.5) - d / 2, d / 2, 0, 2 * Math.PI), i.fill())
                                        : i.fillRect(t.width * (s + 0.5) - d / 2, t.height * (a + 0.5) - d / 2, d, d);
                            }
                        }
                    }
                    (this.prevW = t.clientWidth), (this.prevH = t.clientHeight);
                }
                -1 != this.drawRequest && (this.drawRequest = requestAnimationFrame(this.draw.bind(this))), (this.LAST_RENDER_T = timeStamp() - e);
            } else this.destroy();
        },
        move: function () {
            var e = timeStamp(),
                t = (e - this.lastMoveTS) / (1e3 / 60);
            if (((this.lastMoveTS = e), !this.PAUSED)) {
                var i = Math.pow(this.SPEED_ADJ_FACTOR < 0 ? 0 : this.SPEED_ADJ_FACTOR > 1 ? 1 : this.SPEED_ADJ_FACTOR, 1 / t);
                this.SPEED < 0 && (this.SPEED = 0);
                var n = SPEED;
                this.SPEED = this.TARGET_SPEED * i + this.SPEED * (1 - i);
                for (var r = 0; r < this.stars.length; r++) {
                    var s = this.stars[r];
                    for (s.z -= n; s.z < 1;) (s.z += 1e3), (s.x = (Math.random() - 0.5) * s.z), (s.y = (Math.random() - 0.5) * s.z);
                }
            }
        },
        destroy: function (e) {
            if (e) WarpSpeed.RUNNING_INSTANCES[e] && WarpSpeed.RUNNING_INSTANCES[e].destroy();
            else {
                try {
                    cancelAnimationFrame(this.drawRequest);
                } catch (e) {
                    this.drawRequest = -1;
                }
                WarpSpeed.RUNNING_INSTANCES[this.targetId] = void 0;
            }
        },
        pause: function () {
            this.PAUSED = !0;
        },
        resume: function () {
            this.PAUSED = !1;
        },
    }),
    (WarpSpeed.destroy = WarpSpeed.prototype.destroy);
var x = new WarpSpeed("canvas", themes[currentTheme]);
themeChangeButton.addEventListener("click", () => {
    x.destroy, (x = new WarpSpeed("canvas", themes[++currentTheme % themes.length])), inputBox.focus();
}),
    document.addEventListener("keypress", function (e) {
        e.defaultPrevented || ("Enter" === e.key && ++currentText && init());
    });
